package cssrc

// 报错行号+3
const templateText = `// Generated by github.com/davyxu/tabtoy
// DO NOT EDIT!!
// Version: {{.Version}}
using System;
using System.Collections.Generic;

namespace {{.PackageName}}
{ 	{{range $sn, $objName := $.Types.EnumNames}}
	public enum {{$objName}}
	{ {{range $fi,$field := $.Types.AllFieldByName $objName}}
		{{$field.FieldName}} = {{$field.Value}}, // {{$field.Name}} {{end}}
	}
	{{end}}	{{range $sn, $objName := $.Types.StructNames}}
	public partial class {{$objName}} : tabtoy.ITableSerializable
	{ {{range $fi,$field := $.Types.AllFieldByName $objName}}
		public {{CSType $field}} {{$field.FieldName}} = {{CSDefaultValue $ $field}}; {{end}}

		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 tag = 0;
            while ( reader.ReadTag(ref tag) )
            {
 				switch (tag)
                { {{range $fi,$field := $.Types.AllFieldByName $objName}}
                	case {{CSTag $ $fi $field}}:
                	{
						reader.Read{{CSReader $ $field}}( ref {{$field.FieldName}} );
                	}
                	break;{{end}}
				}
			}
		}
		#endregion
	}
	{{end}}

	// Combine struct
	public partial class {{.CombineStructName}}
	{ {{range $ti, $tab := $.Datas.AllTables}}
		public List<{{$tab.HeaderType}}> {{$tab.HeaderType}} = new List<{{$tab.HeaderType}}>(); // table: {{$tab.HeaderType}} {{end}}

		public void Deserialize( tabtoy.TableReader reader )
		{	
			reader.ReadHeader();{{range $ti, $tab := $.Datas.AllTables}}
			reader.ReadStruct(ref {{$tab.HeaderType}}); {{end}}
		}
	}
}
`
